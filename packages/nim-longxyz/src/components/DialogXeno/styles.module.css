@property --size {
  syntax: '<length>';
  inherits: false;
  initial-value: 32px;
}

.dialog {
  z-index: 0;
  position: fixed;
  flex-direction: column;
  block-size: 100dvh;
  inline-size: 100vw;
  border: none;
  border-radius: 0;
  background-color: #03030390;
  backdrop-filter: blur(8px);
  padding-block: 5cap;

  outline: var(--border-width-3) solid var(--color-accent-1);
  outline-offset: var(--border-width-3);

  &[open] {
    display: flex;
  }

  &::before,
  &::after {
    z-index: var(--z-index--1);
    content: '';
    position: fixed;
    inset: 0;
    block-size: 100dvh;
    inline-size: 100vw;
    background: radial-gradient(
      color-mix(in oklch shorter hue, var(--color-accent-1), 85% transparent),
      transparent 65%
    );
  }

  &::after {
    background-position: center center;
    background-size: var(--size) var(--size);
    opacity: 0.85;

    animation: blurry ease-out 1s forwards;
  }

  &::backdrop {
    display: none;
  }
}

@keyframes blurry {
  from {
    --size: 20px;
    filter: blur(5px);
    opacity: 0.1;
  }

  65% {
    opacity: 0.3;
  }

  to {
    --size: 5px;
  }
}

.fieldset p:not(.option) {
  color: var(--color-on-surface-2);
}

.nodelay * {
  --r: 0 !important;
}

.fieldset {
  all: unset;

  &:not(:first-of-type) {
    margin-block-start: var(--margin-block-3);

    & legend {
      line-height: 3;
      padding-inline: 0;
    }
  }

  & legend {
    color: var(--color-accent-1);
    text-shadow: var(--color-accent-1) 1px 0 10px;
  }

  & > * {
    --r: 0;

    clip-path: polygon(0 0, 0 0, 0 100%, 0% 100%);
    animation: clips-in linear 0.85s calc(0.65s * (var(--r) - 1)) forwards;
  }

  & kbd {
    border: var(--border-width-1) solid var(--color-accent-1);
    background: none;
  }

  & input[type='text'] {
    background-color: color-mix(
      in oklch shorter hue,
      var(--color-surface-1),
      10% transparent
    );
    border-block-end: var(--border-width-1) solid var(--color-accent-1);
  }

  & label {
    cursor: pointer;

    @media (--touch) {
      padding-block: 0.85cap;
    }
  }

  & p {
    position: relative;
  }

  & input[type='radio'] {
    position: relative;
    appearance: none;
    inline-size: 3ch;
    block-size: 3ch;
    pointer-events: none;

    &::before {
      content: '';
      position: absolute;
      background-color: var(--color-accent-1);
      inset: 1.15ch;
    }

    &:is(:focus, :checked)::before {
      outline: var(--border-width-1) solid var(--color-accent-1);
      outline-offset: var(--border-width-2);
    }
  }
}

.option {
  display: flex;
  gap: 1.15ch;
  align-items: center;

  & input {
    outline: none !important;
  }

  &:has(input + small) {
    display: grid;
  }

  & small {
    color: var(--color-on-surface-2);
  }
}

@keyframes clips-in {
  to {
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
  }
}

.title {
  z-index: var(--z-index-max);
  font-size: var(--font-size-1);
  font-weight: var(--font-weight-1);
  position: absolute;
  inset-block-start: 0;
  inset-inline: 2ch;
  line-height: 2.5;
  margin-block: 0;
  color: var(--color-accent-1);
}

.close {
  z-index: var(--z-index-max);
  position: fixed;
  inset-inline-end: 1.5ch;
  inset-block-start: 1.15cap;
  color: black;
  block-size: 1.65cap;
  inline-size: 1.65cap;
  font-size: 1.5em;
  display: flex;
  align-items: center;
  padding: 0;
  justify-content: center;
  background-color: var(--color-accent-1);
}

.meme {
  margin-block-start: 1cap;
  inline-size: fit-content;

  &:is(:hover, :focus-within) .use {
    opacity: 1;
  }

  & img {
    border: var(--border-width-1) solid var(--color-accent-1);

    &[aria-busy='true'] {
      opacity: 0.15;
      animation: blink ease-out 1.35s infinite;
    }
  }
}

@keyframes blink {
  from {
    opacity: 0.35;
  }
  to {
    opacity: 0.15;
  }
}

.use {
  background-color: var(--color-accent-1);
  margin-block: 1cap;
  padding-block: 0.15cap;
  padding-inline: 0.85ch;
  position: absolute;
  inset-block-end: 0;
  inset-inline-start: 1ch;
  opacity: 0;
}
